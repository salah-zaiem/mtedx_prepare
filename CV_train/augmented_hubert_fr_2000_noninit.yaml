# ################################
# Recipe for training an SSL-based ctc ASR system with librispeech.
# Decoding is performed with ctc greedy or LM-rescored decoder.
#
# Authors
# * Salah Zaiem 2023
# * Youcef Kemiche 2023
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/fr/augmented_hubert_all_2000_960_noninit/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt


# Data files
data_folder: /gpfsscratch/rech/nou/uzn19yk/Libri/LibriSpeech/ # e,g./path/to/LibriSpeech
# noise/ris dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
csv_folder: /gpfswork/rech/nou/uzn19yk/last_DASB/speechbrain/recipes/CommonVoice/quantization/fr_csvs/
train_splits: ["train-clean-100"]
dev_splits: ["dev-clean"]
test_splits: ["test-clean", "test-other"]

skip_prep: True
ckpt_interval_minutes: 25 # save checkpoint every N min
train_csv: !ref <csv_folder>/shorter_train.csv
valid_csv: !ref <csv_folder>/dev.csv
test_csv:
   - !ref <csv_folder>/test.csv

# Training parameters
number_of_epochs: 29
lr: 0.0002
lr_weights: 0.01
sorting: ascending
auto_mix_prec: False
sample_rate: 16000
language_modelling: False
#ngram_lm_path: !PLACEHOLDER #path/to/4-gram.arpa

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 3 per GPU to fit 32GB of VRAM
batch_size: 4
test_batch_size: 4

# Dataloader options
train_dataloader_opts:
   batch_size: !ref <batch_size>

valid_dataloader_opts:
   batch_size: !ref <batch_size>

test_dataloader_opts:
   batch_size: !ref <test_batch_size>

# Model parameters
activation: !name:torch.nn.Sigmoid
dnn_layers: 1
dnn_neurons: 768
freeze_encoder: True

# Outputs
output_neurons: 30  # BPE size, index(blank/eos/bos) = 0

# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>


augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
   sample_rate: !ref <sample_rate>
   speeds: [95, 100, 105]
num_layers_ssl: 25  #Number of layers in the SSL model (should be 25 for large )
ssl_hub: /gpfsstore/rech/nou/uzn19yk/hubert-large-ll60k/
encoder_dim: 1024
pad_index: 0

ssl_folder: !ref <save_folder>/hubert_checkpoint
kmeans_repo_id: /gpfswork/rech/nou/uzn19yk/last_DASB/speechbrain/recipes/CommonVoice/quantization/hubert_2000_fr/
kmeans_cache_dir: !ref <save_folder>/kmeans_checkpoint
kmeans_dataset: LibriSpeech-100-360-500
num_clusters: 2000
freeze_ssl: True
freeze_feature_extractor: True

ssl_layer_num: [1,3, 7, 12, 23]
deduplicate: [False,False, False, False, False]
bpe_tokenizer_path: [null, null , null,  null, null]
 
ssl_model: !new:speechbrain.lobes.models.huggingface_transformers.hubert.HuBERT
   source: !ref <ssl_hub>
   output_norm: False
   freeze: !ref <freeze_ssl>
   freeze_feature_extractor: !ref <freeze_feature_extractor>
   output_all_hiddens: True
   save_path: !ref <ssl_folder>

discrete_ssl_model: !new:speechbrain.lobes.models.huggingface_transformers.discrete_ssl.DiscreteSSL
   save_path: !ref <kmeans_cache_dir>
   ssl_model: !ref <ssl_model>
   kmeans_dataset: !ref <kmeans_dataset>
   kmeans_repo_id: !ref <kmeans_repo_id>
   num_clusters: !ref <num_clusters>


# Config for Tokenizer
# Layer number should be among the supported layers for discrete SSL models(kmenas  model should be available for that layer)
# ssl_layer_num: [3, 7, 12, 23]
# deduplicate: [False, False, False, False]
# bpe_tokenizer_path: [null , null,  null, null]
init_emb: False
freeze_emb: False
# If init_emb=True, it should be the same dimension as SSL output dim.
dis_emb_dim: 1024

tokenizer_config:
   SSL_layers: !ref <ssl_layer_num>
   deduplicates: !ref <deduplicate>
   bpe_tokenizers:  !ref <bpe_tokenizer_path>

discrete_embedding_layer: !new:custom_model.EmbeddingLayer
    discrete_ssl_model: !ref <discrete_ssl_model>
    SSL_layers: !ref <ssl_layer_num>
    num_clusters: !ref <num_clusters>
    emb_dim: !ref <dis_emb_dim>
    pad_index: !ref <pad_index>
    init: !ref <init_emb>
    freeze: !ref <freeze_emb>

attention_mlp: !new:custom_model.AttentionMLP
    input_dim: !ref <dis_emb_dim>
    hidden_dim: !ref <dis_emb_dim>


enc: !new:speechbrain.nnet.RNN.LSTM
   input_shape: [Null, Null, !ref <encoder_dim>]
   num_layers: 2
   bidirectional: True
   dropout: 0.2
   hidden_size: 1024

ctc_lin: !new:speechbrain.nnet.linear.Linear
   input_size: 2048
   n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
   blank_index: !ref <blank_index>

modules:
   enc: !ref <enc>
   ctc_lin: !ref <ctc_lin>
   discrete_ssl_model: !ref <discrete_ssl_model>
   attention_mlp: !ref <attention_mlp>
   discrete_embedding_layer: !ref <discrete_embedding_layer>
   ssl_model: !ref <ssl_model>


model: !new:torch.nn.ModuleList
   - [!ref <enc>, !ref <ctc_lin>, !ref <attention_mlp>]

model_opt_class: !name:torch.optim.Adam
   lr: !ref <lr>

weights_opt_class: !name:torch.optim.Adam
   lr: !ref <lr_weights>



# Speed perturbation
speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
   orig_freq: !ref <sample_rate>
   speeds: [95, 100, 105]

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
   drop_freq_low: 0
   drop_freq_high: 1
   drop_freq_count_low: 1
   drop_freq_count_high: 3
   drop_freq_width: 0.05

# Time drop: randomly drops a number of temporal chunks.
drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
   drop_length_low: 1000
   drop_length_high: 2000
   drop_count_low: 1
   drop_count_high: 5

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
   concat_original: True
   min_augmentations: 4
   max_augmentations: 4
   augment_prob: 1.0
   augmentations: [
      !ref <speed_perturb>,
      !ref <drop_freq>,
      !ref <drop_chunk>]


lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr>
   improvement_threshold: 0.0025
   annealing_factor: 0.8
   patient: 0

lr_annealing_weights: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr_weights>
   improvement_threshold: 0.0025
   annealing_factor: 0.9
   patient: 0

label_encoder: !new:speechbrain.dataio.encoder.CTCTextEncoder

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
   checkpoints_dir: !ref <save_folder>
   recoverables:
      model: !ref <model>
      scheduler_model: !ref <lr_annealing_model>
      scheduler_encoder: !ref <lr_annealing_weights>
      counter: !ref <epoch_counter>
      tokenizer: !ref <label_encoder>

blank_index: 0
unk_index: 1


train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
   split_tokens: True
